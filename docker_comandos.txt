

#Instalar images
    sudo docker pull postgres:9.6
    sudo docker pull postgres:10
    sudo docker pull dpage/pgadmin4
    sudo docker pull mcr.microsoft.com/mssql/server:2017-latest
    sudo docker pull mcr.microsoft.com/mssql/server:2019-GA-ubuntu-16.04
    sudo docker pull mysql/mysql-server:5.6
    sudo docker pull mysql/mysql-server:5.7
    sudo docker pull mysql/mysql-server:8
    sudo docker pull mysql/mysql-server:8.1.1.8
    sudo docker pull mysql/mysql-cluster


#Iniciar container

    #Postgres:
        #Criando uma network para execução dos containers
            sudo docker run --name teste-postgres --network=postgres-network -e "POSTGRES_PASSWORD=Postgres2018!" -p 5432:5432 -v /home/renatogroffe/Desenvolvimento/PostgreSQL:/var/lib/postgresql/data -d postgres

        #Criando um container para executar uma instância do PostgreSQL
            sudo docker run --name teste-postgres --network=postgres-network -e "POSTGRES_PASSWORD=Postgres2018!" -p 5432:5432 -v /home/renatogroffe/Desenvolvimento/PostgreSQL:/var/lib/postgresql/data -d postgres

        #No caminho /home/renatogroffe/Desenvolvimento/PostgreSQL do Ubuntu Desktop, estarão os arquivos de dados vinculados a esta instância (o diretório PostgreSQL será criado caso ainda não exista):

        #Criando um container para execução do pgAdmin 4
            sudo docker run --name teste-pgadmin --network=postgres-network -p 15432:80 -e "PGADMIN_DEFAULT_EMAIL=renatogroff@yahoo.com.br" -e "PGADMIN_DEFAULT_PASSWORD=PgAdmin2018!" -d dpage/pgadmin4

        #Testes - acessando a URL http://localhost:15432 aparecerá a tela para login no pgAdmin 4:





    #SQL Server
        #Criando um container para executar uma instância do SQL Server 2019
            sudo docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=<YourStrong@Passw0rd>" \
            -p 1433:1433 --name sql1 \
            -d mcr.microsoft.com/mssql/server:2019-GA-ubuntu-16.04
        


        #Criando um container para executar uma instância do SQL Server 2017
            sudo docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=<YourStrong@Passw0rd>" \
            -p 1433:1433 --name sql1 \
            -d mcr.microsoft.com/mssql/server:2017-latest


        #Alterar a senha SA
        sudo docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd \
        -S localhost -U SA -P "<YourStrong@Passw0rd>" \
        -Q 'ALTER LOGIN SA WITH PASSWORD="<YourNewStrong@Passw0rd>"'



        #Conecte-se ao SQL Server
            #As etapas a seguir usam a ferramenta de linha de comando do SQL Server, a sqlcmd, dentro do contêiner para conectar-se ao SQL Server.
            #01 - Use o comando docker exec -it para iniciar um shell bash interativo dentro do contêiner em execução. No exemplo a seguir, sql1 é o nome especificado pelo parâmetro --name na criação do contêiner.
                sudo docker exec -it sql1 "bash"


            #02 - Quando estiver dentro do contêiner, conecte-se localmente com a sqlcmd. A sqlcmd não está no caminho por padrão, portanto, você precisará especificar o caminho completo.
                /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "<YourNewStrong@Passw0rd>"



        #mysql
            #Criando um container para executar uma instância do MySQL
                sudo docker run --name=mysql1 -d mysql/mysql-server:tag

            #A -dopção usada no docker runcomando acima faz com que o contêiner seja executado em segundo plano. Use este comando para monitorar a saída do contêiner:
                sudo docker logs mysql1
            #Após a conclusão da inicialização, a saída do comando conterá a senha aleatória gerada para o usuário root; verifique a senha com, por exemplo, este comando:
                sudo docker logs mysql1 2>&1 | grep GENERATED

            #Conectando ao MySQL Server de dentro do Container
                sudo docker exec -it mysql1 mysql -uroot -p

        #MySQL Cluster NDB
            
            #Observe que a ordem de inicialização do contêiner é muito rigorosa e provavelmente precisará ser iniciada do zero, se alguma etapa falhar. Primeiro, criamos uma rede interna do Docker que os contêineres usarão para se comunicar.
                
                docker network create cluster --subnet=192.168.0.0/16
            
             #Então começamos o nó de gerenciamento
                docker run -d --net=cluster --name=management1 --ip=192.168.0.2 mysql/mysql-cluster ndb_mgmd
                
             #Os dois nós de dados
                docker run -d --net=cluster --name=ndb1 --ip=192.168.0.3 mysql/mysql-cluster ndbd
                docker run -d --net=cluster --name=ndb2 --ip=192.168.0.4 mysql/mysql-cluster ndbd

            #E, finalmente, o nó do servidor MySQL
                docker run -d --net=cluster --name=mysql1 --ip=192.168.0.10 -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql/mysql-cluster mysqld
                
            #O servidor será inicializado com uma senha aleatória que precisará ser alterada; portanto, busque-a no log, faça login e altere a senha. Se você receber um erro dizendo «ERRO 2002 (HY000): Não é possível conectar ao servidor MySQL local através do soquete», o servidor ainda não concluiu a inicialização.
                docker logs mysql1 2>&1 | grep PASSWORD
                docker exec -it mysql1 mysql -uroot -p
                ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';

            #Finalmente, inicie um contêiner com um cliente de gerenciamento interativo para verificar se o cluster está ativo
                docker run -it --net=cluster mysql/mysql-cluster ndb_mgm

            #Execute o comando SHOW para imprimir o status do cluster. Você deve ver o seguinte

            #Starting ndb_mgm
            -- NDB Cluster -- Management Client --
            ndb_mgm> show
            Connected to Management Server at: 192.168.0.2:1186
            Cluster Configuration
            ---------------------
            [ndbd(NDB)]    2 node(s)
            id=2    @192.168.0.3  (mysql-5.7.18 ndb-7.6.2, Nodegroup: 0, *)
            id=3    @192.168.0.4  (mysql-5.7.18 ndb-7.6.2, Nodegroup: 0)

            [ndb_mgmd(MGM)]    1 node(s)
            id=1    @192.168.0.2  (mysql-5.7.18 ndb-7.6.2)

            [mysqld(API)]    1 node(s)
            id=4    @192.168.0.10  (mysql-5.7.18 ndb-7.6.2)




#Instalar sqlcmd e bcp, as ferramentas de linha de comando do SQL Server no Linux
    #Ubuntu
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update 
        sudo apt-get install mssql-tools unixodbc-dev
        sudo apt-get update 
        sudo apt-get install mssql-tools

        #Opcional: Adicione /opt/mssql-tools/bin/ à sua variável de ambiente PATH em um shell de Bash. Para tornar o sqlcmd/bcp acessível do shell de Bash para sessões de logon, modifique o PATH no arquivo ~/.bash_profile com o seguinte comando:
            echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile

        #Para tornar o sqlcmd/bcp acessível do shell de Bash para sessões interativas/que não são de logon, modifique o PATH no arquivo ~/.bashrc com o seguinte comando:
            echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc source ~/.bashrc
        # Conectando com o sqlcmd.
            sqlcmd -S <ip_address>,1433 -U SA -P "<YourNewStrong@Passw0rd>"



















